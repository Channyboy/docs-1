/* Generated by Opal 1.0.3 */
(function(Opal) {
    function $rb_plus(lhs, rhs) {
      return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
    }
    var $$4, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2, $send = Opal.send;
  
    Opal.add_stubs(['$require', '$use_dsl', '$named', '$convert', '$create_anchor', '$+', '$register', '$inline_macro']);
    
    self.$require("asciidoctor");
    self.$require("asciidoctor/extensions");
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'FeatureLinkMacro');
  
      var $nesting = [self].concat($parent_nesting), $FeatureLinkMacro_process$1;
  
      
      self.$use_dsl();
      self.$named("feature");
      return (Opal.def(self, '$process', $FeatureLinkMacro_process$1 = function $$process(parent, target, attrs) {
        var self = this;
  
        return self.$create_anchor(parent, target, $hash2(["type", "target"], {"type": "link", "target": $rb_plus($rb_plus("/docs/ref/feature/#", target), ".html")})).$convert()
      }, $FeatureLinkMacro_process$1.$$arity = 3), nil) && 'process';
    })($nesting[0], $$$($$$($$($nesting, 'Asciidoctor'), 'Extensions'), 'InlineMacroProcessor'), $nesting);
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'ConfigLinkMacro');
  
      var $nesting = [self].concat($parent_nesting), $ConfigLinkMacro_process$2;
  
      
      self.$use_dsl();
      self.$named("config");
      return (Opal.def(self, '$process', $ConfigLinkMacro_process$2 = function $$process(parent, target, attrs) {
        var self = this;
  
        return self.$create_anchor(parent, target, $hash2(["type", "target"], {"type": "link", "target": $rb_plus($rb_plus("/docs/ref/config/#", target), ".html")})).$convert()
      }, $ConfigLinkMacro_process$2.$$arity = 3), nil) && 'process';
    })($nesting[0], $$$($$$($$($nesting, 'Asciidoctor'), 'Extensions'), 'InlineMacroProcessor'), $nesting);
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'JavadocLinkMacro');
  
      var $nesting = [self].concat($parent_nesting), $JavadocLinkMacro_process$3;
  
      
      self.$use_dsl();
      self.$named("javadoc");
      return (Opal.def(self, '$process', $JavadocLinkMacro_process$3 = function $$process(parent, target, attrs) {
        var self = this;
  
        return target
      }, $JavadocLinkMacro_process$3.$$arity = 3), nil) && 'process';
    })($nesting[0], $$$($$$($$($nesting, 'Asciidoctor'), 'Extensions'), 'InlineMacroProcessor'), $nesting);
    return $send($$$($$($nesting, 'Asciidoctor'), 'Extensions'), 'register', [], ($$4 = function(){var self = $$4.$$s || this;
  
      console.log("ol-asciidoc js extension working");
      self.$inline_macro($$($nesting, 'FeatureLinkMacro'));
      self.$inline_macro($$($nesting, 'ConfigLinkMacro'));
      return self.$inline_macro($$($nesting, 'JavadocLinkMacro'));}, $$4.$$s = self, $$4.$$arity = 0, $$4));
  })(Opal);
  